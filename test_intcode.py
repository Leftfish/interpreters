import pytest
import intcode

c = intcode.Computer()

def test_day2():
    code = [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,19,10,23,2,13,23,27,1,5,27,31,2,6,31,35,1,6,35,39,2,39,9,43,1,5,43,47,1,13,47,51,1,10,51,55,2,55,10,59,2,10,59,63,1,9,63,67,2,67,13,71,1,71,6,75,2,6,75,79,1,5,79,83,2,83,9,87,1,6,87,91,2,91,6,95,1,95,6,99,2,99,13,103,1,6,103,107,1,2,107,111,1,111,9,0,99,2,14,0,0]
    c.load_code(code)
    c.run(12, 2)
    assert c.memory[0] == 4138687

def test_basic_IO():
    code = [3,0,4,0,99]
    c.reset()
    c.load_code(code)
    c.read_input(10)
    c.run()
    assert c.get_output() == 10

def test_basic_modes():
    code = [1101,100,-1,4,0]
    c.reset()
    c.load_code(code)
    c.run()
    assert c.memory[4] == 99

def test_op_equals_position_mode():
    outputs = []
    code = [3,9,8,9,10,9,4,9,99,-1,8]
    c.reset()
    c.load_code(code)
    c.read_input(8)
    c.run()
    outputs.append(c.get_output())
    c.reset()
    c.load_code(code)
    c.read_input(7)
    c.run()
    outputs.append(c.get_output())
    assert outputs == [1, 0]

def test_op_equals_immediate_mode():
    outputs = []
    code = [3,3,1108,-1,8,3,4,3,99]
    c.reset()
    c.load_code(code)
    c.read_input(8)
    c.run()
    outputs.append(c.get_output())
    c.reset()
    c.load_code(code)
    c.read_input(7)
    c.run()
    outputs.append(c.get_output())
    assert outputs == [1, 0]

def test_op_less_than_position_mode():
    outputs = []
    code = [3,9,7,9,10,9,4,9,99,-1,8]
    c.reset()
    c.load_code(code)
    c.read_input(-10)
    c.run()
    outputs.append(c.get_output())
    c.reset()
    c.load_code(code)
    c.read_input(10)
    c.run()
    outputs.append(c.get_output())
    assert outputs == [1, 0]

def test_op_less_than_immediate_mode():
    outputs = []
    code = [3,3,1107,-1,8,3,4,3,99]
    c.reset()
    c.load_code(code)
    c.read_input(-10)
    c.run()
    outputs.append(c.get_output())
    c.reset()
    c.load_code(code)
    c.read_input(10)
    c.run()
    outputs.append(c.get_output())
    assert outputs == [1, 0]

def test_jumps():
    outputs = []
    code = [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99]
    c.reset()
    c.load_code(code)
    c.read_input(-10)
    c.run()
    outputs.append(c.get_output())
    c.reset()
    c.load_code(code)
    c.read_input(8)
    c.run()
    outputs.append(c.get_output())
    c.reset()
    c.load_code(code)
    c.read_input(100)
    c.run()
    outputs.append(c.get_output())
    assert outputs == [999, 1000, 1001]

def test_large_numbers():
    code = [104,1125899906842624,99]
    c.reset()
    c.load_code(code)
    c.run()
    assert c.get_output() == 1125899906842624

def test_large_numbers_2():
    code = [1102,34915192,34915192,7,4,7,99,0]
    c.reset()
    c.load_code(code)
    c.run()
    assert c.get_output() == 1219070632396864

def test_relative_mode():
    code = [109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99]
    c.reset()
    c.load_code(code)
    c.run()
    assert c.output.buffer == code

def test_full_diagnostics():
    code = [1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1102,3,1,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1101,20,0,1007,1101,0,197,1022,1102,475,1,1028,1102,30,1,1008,1101,25,0,1010,1102,1,23,1009,1101,0,22,1013,1101,470,0,1029,1102,24,1,1014,1102,1,39,1005,1101,31,0,1003,1101,807,0,1026,1101,0,26,1018,1102,1,804,1027,1101,0,0,1020,1102,1,38,1017,1101,0,27,1016,1102,443,1,1024,1101,0,36,1006,1102,21,1,1015,1101,28,0,1001,1102,33,1,1019,1102,1,37,1011,1102,1,190,1023,1101,0,434,1025,1101,34,0,1004,1102,1,1,1021,1101,0,29,1012,1102,1,32,1002,1101,35,0,1000,109,30,2105,1,-7,1001,64,1,64,1105,1,199,4,187,1002,64,2,64,109,-23,2101,0,-5,63,1008,63,32,63,1005,63,225,4,205,1001,64,1,64,1105,1,225,1002,64,2,64,109,7,2102,1,-5,63,1008,63,23,63,1005,63,251,4,231,1001,64,1,64,1106,0,251,1002,64,2,64,109,-16,2101,0,2,63,1008,63,33,63,1005,63,275,1001,64,1,64,1106,0,277,4,257,1002,64,2,64,109,10,21102,40,1,4,1008,1012,40,63,1005,63,299,4,283,1106,0,303,1001,64,1,64,1002,64,2,64,109,7,2102,1,-9,63,1008,63,33,63,1005,63,327,1001,64,1,64,1105,1,329,4,309,1002,64,2,64,109,-17,2107,34,2,63,1005,63,347,4,335,1105,1,351,1001,64,1,64,1002,64,2,64,109,1,1201,8,0,63,1008,63,23,63,1005,63,375,1001,64,1,64,1106,0,377,4,357,1002,64,2,64,109,-4,2108,31,8,63,1005,63,395,4,383,1105,1,399,1001,64,1,64,1002,64,2,64,109,3,1201,8,0,63,1008,63,36,63,1005,63,421,4,405,1105,1,425,1001,64,1,64,1002,64,2,64,109,25,2105,1,1,4,431,1001,64,1,64,1105,1,443,1002,64,2,64,109,-3,1205,0,459,1001,64,1,64,1106,0,461,4,449,1002,64,2,64,109,-2,2106,0,10,4,467,1106,0,479,1001,64,1,64,1002,64,2,64,109,12,1206,-9,495,1001,64,1,64,1106,0,497,4,485,1002,64,2,64,109,-39,1207,9,36,63,1005,63,519,4,503,1001,64,1,64,1105,1,519,1002,64,2,64,109,11,1202,-1,1,63,1008,63,28,63,1005,63,541,4,525,1105,1,545,1001,64,1,64,1002,64,2,64,109,6,2107,24,1,63,1005,63,565,1001,64,1,64,1106,0,567,4,551,1002,64,2,64,109,1,1207,-3,35,63,1005,63,583,1106,0,589,4,573,1001,64,1,64,1002,64,2,64,109,1,21102,41,1,5,1008,1015,40,63,1005,63,613,1001,64,1,64,1105,1,615,4,595,1002,64,2,64,109,-2,2108,22,1,63,1005,63,635,1001,64,1,64,1105,1,637,4,621,1002,64,2,64,109,-10,1208,4,33,63,1005,63,653,1106,0,659,4,643,1001,64,1,64,1002,64,2,64,109,16,1206,6,673,4,665,1106,0,677,1001,64,1,64,1002,64,2,64,109,-4,1202,-8,1,63,1008,63,35,63,1005,63,701,1001,64,1,64,1105,1,703,4,683,1002,64,2,64,109,13,21108,42,42,-8,1005,1015,721,4,709,1105,1,725,1001,64,1,64,1002,64,2,64,109,-18,21107,43,44,5,1005,1010,743,4,731,1106,0,747,1001,64,1,64,1002,64,2,64,109,-11,1208,8,32,63,1005,63,765,4,753,1106,0,769,1001,64,1,64,1002,64,2,64,109,15,21101,44,0,5,1008,1014,47,63,1005,63,789,1105,1,795,4,775,1001,64,1,64,1002,64,2,64,109,13,2106,0,5,1106,0,813,4,801,1001,64,1,64,1002,64,2,64,109,-12,21108,45,43,0,1005,1010,829,1106,0,835,4,819,1001,64,1,64,1002,64,2,64,109,-4,21107,46,45,10,1005,1016,855,1001,64,1,64,1106,0,857,4,841,1002,64,2,64,109,3,21101,47,0,5,1008,1014,47,63,1005,63,883,4,863,1001,64,1,64,1106,0,883,1002,64,2,64,109,10,1205,2,901,4,889,1001,64,1,64,1105,1,901,4,64,99,21102,27,1,1,21102,915,1,0,1106,0,922,21201,1,13433,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,0,942,0,1106,0,922,22102,1,1,-1,21201,-2,-3,1,21102,1,957,0,1105,1,922,22201,1,-1,-2,1106,0,968,21202,-2,1,-2,109,-3,2106,0,0]
    c.reset()
    c.load_code(code)
    c.read_input(1)
    c.run()
    assert c.get_output() == 2682107844